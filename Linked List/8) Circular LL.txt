There are generally two types of circular linked lists:

Circular singly linked list: In a circular Singly linked list, the last node of the list
contains a pointer to the first node of the list. We traverse the circular singly linked list until
we reach the same node where we started. The circular singly linked list has no beginning or end.
No null value is present in the next part of any of the nodes.

Circular Doubly linked list: Circular Doubly Linked List has properties of both doubly linked list
and circular linked list in which two consecutive elements are linked or connected by the previous
and next pointer and the last node points to the first node by the next pointer and also the first
node points to the last node by the previous pointer.

INSERTION IN CIRCULAR LL:
1) Insertion at the beginning of the list

Create a node, say T. 
Make T -> next = last -> next. 
last -> next = T. 

struct Node *addBegin(struct Node *last, int data)
{
if (last == NULL)
	return addToEmpty(last, data);

// Creating a node dynamically.
struct Node *temp
		= (struct Node *)malloc(sizeof(struct Node));
	
// Assigning the data.
temp -> data = data;

// Adjusting the links.
temp -> next = last -> next;
last -> next = temp;
	
return last;
}

Time complexity: O(1) to insert a node at the beginning no need to traverse list it takes constant time 
Auxiliary Space: O(1)

2) Insertion at the end of the list: To insert a node at the end of the list, follow these steps: 

Create a node, say T. 
Make T -> next = last -> next; 
last -> next = T. 
last = T. 

struct Node *addEnd(struct Node *last, int data)
{
if (last == NULL)
	return addToEmpty(last, data);

// Creating a node dynamically.
struct Node *temp =
		(struct Node *)malloc(sizeof(struct Node));
	
// Assigning the data.
temp -> data = data;

// Adjusting the links.
temp -> next = last -> next;
last -> next = temp;
last = temp;
	
return last;
}

Time Complexity: O(1) to insert a node at the end of the list. No need to traverse the list as
 we are utilizing the last pointer, hence it takes constant time.
Auxiliary Space: O(1)

3) Insertion in between the nodes: To insert a node in between the two nodes, follow these steps: 

Create a node, say T. 
Search for the node after which T needs to be inserted, say that node is P. 
Make T -> next = P -> next; 
P -> next = T.

struct Node *addAfter(struct Node *last, int data, int item)
{
	if (last == NULL)
	return NULL;

	struct Node *temp, *p;
	p = last -> next;

	// Searching the item.
	do
	{
		if (p ->data == item)
		{
			// Creating a node dynamically.
			temp = (struct Node *)malloc(sizeof(struct Node));

			// Assigning the data.
			temp -> data = data;

			// Adjusting the links.
			temp -> next = p -> next;

			// Adding newly allocated node after p.
			p -> next = temp;

			// Checking for the last node.
			if (p == last)
				last = temp;

			return last;
		}
		p = p -> next;
	} while (p != last -> next);

	cout << item << " not present in the list." << endl;
	return last;
}
Time Complexity: O(N)
Auxiliary Space: O(1)

DELETION IN CIRCULAR LL:

Algorithm
Case 1: List is empty. 

If the list is empty we will simply return.
Case 2:List is not empty  

1)If the list is not empty then we define two pointers curr and prev and initialize the pointer curr with 
the head node.
2)Traverse the list using curr to find the node to be deleted and before moving to curr to the next node, 
every time set prev = curr.
3)If the node is found, check if it is the only node in the list. If yes, set head = NULL and free(curr).
4)If the list has more than one node, check if it is the first node of the list. 
Condition to check this( curr == head). If yes, then move prev until it reaches the last node.
After prev reaches the last node, set head = head -> next and prev -> next = head. Delete curr.
5)If curr is not the first node, we check if it is the last node in the list.
 Condition to check this is (curr -> next == head).
6)If curr is the last node. Set prev -> next = head and delete the node curr by free(curr).
7)If the node to be deleted is neither the first node nor the last node, 
then set prev -> next = curr -> next and delete curr.

// C++ program to delete a given key from
// linked list.
#include <bits/stdc++.h>
using namespace std;

/* structure for a node */
class Node {
public:
	int data;
	Node* next;
};

/* Function to insert a node at the beginning of
a Circular linked list */
void push(Node** head_ref, int data)
{
	// Create a new node and make head as next
	// of it.
	Node* ptr1 = new Node();
	ptr1->data = data;
	ptr1->next = *head_ref;

	/* If linked list is not NULL then set the
	next of last node */
	if (*head_ref != NULL)
	{
		// Find the node before head and update
		// next of it.
		Node* temp = *head_ref;
		while (temp->next != *head_ref)
			temp = temp->next;
		temp->next = ptr1;
	}
	else
		ptr1->next = ptr1; /*For the first node */

	*head_ref = ptr1;
}

/* Function to print nodes in a given
circular linked list */
void printList(Node* head)
{
	Node* temp = head;
	if (head != NULL) {
		do {
			cout << temp->data << " ";
			temp = temp->next;
		} while (temp != head);
	}

	cout << endl;
}

/* Function to delete a given node from the list */
void deleteNode(Node** head, int key)
{
	
	// If linked list is empty
	if (*head == NULL)
		return;
		
	// If the list contains only a single node
	if((*head)->data==key && (*head)->next==*head)
	{
		free(*head);
		*head=NULL;
		return;
	}
	
	Node *last=*head,*d;
	
	// If head is to be deleted
	if((*head)->data==key)
	{
		
		// Find the last node of the list
		while(last->next!=*head)
			last=last->next;
			
		// Point last node to the next of head i.e.
		// the second node of the list
		last->next=(*head)->next;
		free(*head);
		*head=last->next;
	return;
	}
	
	// Either the node to be deleted is not found
	// or the end of list is not reached
	while(last->next!=*head&&last->next->data!=key)
	{
		last=last->next;
	}
	
	// If node to be deleted was found
	if(last->next->data==key)
	{
		d=last->next;
		last->next=d->next;
		free(d);
	}
	else
		cout<<"no such keyfound";
	}

/* Driver code */
int main()
{
	/* Initialize lists as empty */
	Node* head = NULL;

	/* Created linked list will be 2->5->7->8->10 */
	push(&head, 2);
	push(&head, 5);
	push(&head, 7);
	push(&head, 8);
	push(&head, 10);

	cout << "List Before Deletion: ";
	printList(head);

	deleteNode(&head, 7);

	cout << "List After Deletion: ";
	printList(head);

	return 0;
}
Time Complexity: O(n)

Worst case occurs when the element to be deleted is the last element and we need to move through the whole list.

Auxiliary Space: O(1)